[
    {
        "hash": "cf05e1449bccc5dae87b",
        "name": "jackson-databind",
        "format": "Maven",
        "version": "2.0.4",
        "vulnerability": "Security-Critical",
        "cveScore": 9.8,
        "cve": "CVE-2017-7525",
        "vulnDescription": "jackson-databind is vulnerable to Remote Code Execution (RCE). The createBeanDeserializer() function in the BeanDeserializerFactory class allows untrusted Java objects to be deserialized. A remote attacker can exploit this by uploading a malicious serialized object that will result in RCE if the application attempts to deserialize it.",
        "remediation": "In order to mitigate this vulnerability, we recommend upgrading to at least version 2.10.0 and changing any usages of enableDefaultTyping() to activateDefaultTyping(). Alternatively, if upgrading is not a viable option, this vulnerability can be mitigated by disabling default typing. Instead, you will need to implement your own: It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers. Reference: https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization"
    },
    {
        "hash": "a3f2b4e64c61a7fc1ed8",
        "name": "log4j-core",
        "format": "Maven",
        "version": "2.7",
        "vulnerability": "Security-Critical",
        "cveScore": 9.8,
        "cve": "CVE-2017-5645",
        "vulnDescription": "Apache Log4j is vulnerable to Remote Code Execution (RCE). The methods and classes listed below allow untrusted Java objects to be deserialized. A remote attacker can exploit this by uploading a malicious serialized object that will result in RCE if the application attempts to deserialize it. Vulnerable File(s) and Function(s): org/apache/logging/log4j/core/net/server/TcpSocketServer.class createSerializedSocketServer() main() org/apache/logging/log4j/core/net/server/UdpSocketServer.class main() org/apache/logging/log4j/core/net/server/ObjectInputStreamLogEventBridge.class wrapStream()",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. (2.17.1)"
    },
    {
        "hash": "070e02e901924a40097b",
        "name": "struts2-core",
        "format": "Maven",
        "version": "2.5.10",
        "vulnerability": "Security-Critical",
        "cveScore": 10.0,
        "cve": "CVE-2017-12611",
        "vulnDescription": "The struts2-core component is vulnerable to Remote Code Execution (RCE) when using the Jakarta Multipart parser. When Struts receives a request that causes an error message that doesn't have an existing error key, it will throw an exception that is displayed to the user. The Content-Type, Content-Disposition and Content-Length headers of a request are used in this process in such a way that allows injected code to be executed. An attacker can exploit this vulnerability by sending a request with an invalid Content-Type, Content-Dispostion or Content-Length header that contains malicious code that will be executed by Struts. The vulnerable functionality is found in the buildErrorMessage function in JakartaStreamMultiPartRequest.java, MultiPartRequestWrapper.java, and JakartaMultiPartRequest.java in the 2.3.X versions and 2.5.X prior to 2.5.8. As of 2.5.8, the vulnerable functionality is found in the intercept function found in FileUploadInterceptor.java.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Other Workarounds: Change Strut's Multipart parser to something other than Jakarta. Other implementations can be found here: https://cwiki.apache.org/confluence/display/WW/File+Upload#FileUpload-AlternateLibraries Filter the Content-Type header for unexpected values that do match multipart/form-data before it is received by the Struts application. Remove the File Upload Interceptor from the stack, just define your own custom stack and set it as a default - please read How do we configure an Interceptor to be used with every Action. This will work only for Struts 2.5.8 - 2.5.10."
    },
    {
        "hash": "19448fdba5df68602aed",
        "name": "itextpdf",
        "format": "Maven",
        "version": "5.5.6",
        "vulnerability": "Security-High",
        "cveScore": 9.0,
        "cve": "CVE-2017-9096",
        "vulnDescription": "The itextpdf and itext7-core packages are vulnerable to XML External Entity (XXE) attacks. Multiple methods in multiple classes do not restrict external entities. A remote attacker can upload a crafted PDF which when parsed by iText, results in an XXE attack and arbitrary functionality to be executed on the server.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. NOTE: Users of com.lowagie:itext should move away from the artifact altogether towards com.itextpdf:* components. The com.lowagie group refers to deprecated components which are no longer maintained. All com.lowagie classes have been deprecated in 2012. They should no longer be used both for technical as well as legal reasons. Reference: https://www.lowagie.com/iText"
    },
    {
        "hash": "d0fb1b6d1bb616ca9a08",
        "name": "richfaces-core",
        "format": "Maven",
        "version": "4.5.17.Final",
        "vulnerability": "License-Copyleft",
        "cveScore": 8.1,
        "cve": "",
        "vulnDescription": "License containing Copyleft terms detected is in violation for the following reason(s): Found licenses in the 'Copyleft' license threat group ('GPL-2.0-with-classpath-exception')",
        "remediation": "Immediate removal of library with banned license."
    },
    {
        "hash": "393e6b64bd2e82b61cb7",
        "name": "spring-boot-gradle-plugin",
        "format": "Maven",
        "version": "2.2.4.RELEASE",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "2b8e230d2ab644e4ecaa",
        "name": "xmlpull",
        "format": "Maven",
        "version": "1.1.3.1",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "f07ed3d1d32434426a42",
        "name": "axis-ant",
        "format": "Maven",
        "version": "1.2",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "7c78221f8b9d72106aff",
        "name": "express-jwt",
        "format": "NPM",
        "version": "0.1.3",
        "vulnerability": "Security-Critical",
        "cveScore": 9.1,
        "cve": "CVE-2020-15084",
        "vulnDescription": "The express-jwt package is vulnerable to Improper Authorization. The module.exports() function in the index.js file does not require users to specify algorithms in the express-jwt configuration. An attacker can potentially leverage this behavior to bypass authorization in applications that depend on certain libraries, such as jwks-rsa, to provide the secret.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. If upgrading is not a viable option, this vulnerability can be mitigated by providing a secure algorithm in the express-jwt configuration. Configuration Example: const checkJwt = jwt({ secret: jwksRsa.expressJwtSecret({ rateLimit: true,jwksRequestsPerMinute: 5, jwksUri: `https://${DOMAIN}/.well-known/jwks.json`}), // Validate the audience and the issuer. audience: process.env.AUDIENCE, issuer: `https://${DOMAIN}/`, // restrict allowed algorithms algorithms: ['RS256'] }); Reference: https://github.com/auth0/express-jwt/security/advisories/GHSA-6g6m-m6h5-w9gf"
    },
    {
        "hash": "b6b37c1ced0306b221e0",
        "name": "handlebars",
        "format": "NPM",
        "version": "4.1.2",
        "vulnerability": "Security-Critical",
        "cveScore": 9.8,
        "cve": "sonatype-2019-0394",
        "vulnDescription": "The handlebars package is vulnerable to Prototype Pollution resulting from Improper Input Validation. Multiple functions in multiple files, as listed below, do not disallow the calling of helperMissing and blockHelperMissing helpers directly. This can enable an attacker to conduct remote code execution attacks by calling methods from object prototypes which should otherwise not have been called.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue."
    },
    {
        "hash": "feaed255973d2e77555b",
        "name": "acorn",
        "format": "NPM",
        "version": "7.4.1",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "11762ef0aa965333a7b4",
        "name": "on-finished",
        "format": "NPM",
        "version": "2.3.0",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "5532ae04ab69030f06f6",
        "name": "duplexer2",
        "format": "NPM",
        "version": "0.1.4",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "c93ba700def0c20049b8",
        "name": "blazer",
        "format": "Ruby Gem",
        "version": "2.4.2",
        "vulnerability": "Security-High",
        "cveScore": 9.8,
        "cve": "sonatype-2020-1023",
        "vulnDescription": "The chart.js package is vulnerable to Prototype Pollution. Multiple functions and files as listed below fail to disallow access to prototype properties for helpers.merge. An attacker can abuse this flaw by sending malicious data that could overwrite the base prototype object which, depending on its usage by the application, can lead to information disclosure, denial of service or even remote code execution.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Note: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
    },
    {
        "hash": "63c913ac0a8deb0b1de6",
        "name": "kramdown",
        "format": "Ruby Gem",
        "version": "2.3.0",
        "vulnerability": "Security-Critical",
        "cveScore": 9.7,
        "cve": "CVE-2021-28834",
        "vulnDescription": "The kramdown package is vulnerable to Remote Code Execution (RCE). The handle_extension subroutine in extensions.rb fails to filter inline options for the template option by default. This allows for dangerous templates to be defined that may result in information disclosure and potentially Code Execution in the context of the Ruby application.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Note: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
    },
    {
        "hash": "3fc6667f8ef52581c0f4",
        "name": "chronic",
        "format": "Ruby Gem",
        "version": "0.10.2",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "0bd12653ba40df93f8de",
        "name": "chunky_png",
        "format": "Ruby Gem",
        "version": "1.3.8",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "b19b9bf0c2249860ac9d",
        "name": "confire",
        "format": "PyPi",
        "version": "0.2.0",
        "vulnerability": "Security-Critial",
        "cveScore": 9.9,
        "cve": "CVE-2017-16763",
        "vulnDescription": "The confire package is vulnerable to Command Injection. The load() function in the config.py file allows untrusted data via the user configured '~/.confire.yaml', and uses yaml.load() instead of the more secure yaml.safe_load() function to load the YAML. An attacker can exploit this vulnerability by supplying malicious YAML data, containing Python code, via the confire.yaml file.",
        "remediation": "There is no non vulnerable version of this package. We recommend investigating alternative components or a potential mitigating control."
    },
    {
        "hash": "d045feb089e591346ad0",
        "name": "Django",
        "format": "PyPi",
        "version": "1.6",
        "vulnerability": "Security-Critical",
        "cveScore": 10.0,
        "cve": "CVE-2014-0474",
        "vulnDescription": "The Django package has a vulnerability related to type casting in MySQL. The FilePathField, GenericIPAddressField and IPAddressField model field classes in the __init__.py file did not properly perform type conversion on their arguments. A remote attacker could use this flaw to submit a specially crafted SQL query that, when processed by a Django application using a MySQL database, can have various application-specific impacts.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Note: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control"
    },
    {
        "hash": "6116b1eff4157143cca1",
        "name": "selenium",
        "format": "PyPi",
        "version": "3.0.2",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "ab90b67dceab55a11b60",
        "name": "ordereddict",
        "format": "PyPi",
        "version": "1.1",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "149a733e01d4d95cbb6b",
        "name": "drupal-core",
        "format": "PHP Composer",
        "version": "8.3.6",
        "vulnerability": "Security-Critical",
        "cveScore": 9.7,
        "cve": "CVE-2018-7600",
        "vulnDescription": "The Drupal CMS is vulnerable to Remote Code Execution (RCE). The preHandle function in DrupalKernel.php will process request parameters as array objects. A remote attacker could potentially exploit this by sending PHP code in a parameter that is processed as one of these array objects.",
        "remediation": "You are not vulnerable if you use this patch: For 7.x versions:https://cgit.drupalcode.org/drupal/rawdiff/?h=7.x&id=2266d2a83db50e2f97682d9a0fb8a18e2722cba5, For 8.x versions: https://cgit.drupalcode.org/drupal/rawdiff/?h=8.5.x&id=5ac8738fa69df34a0635f0907d661b509ff9a28f"
    },
    {
        "hash": "c7a693509c0053356fc0",
        "name": "zend-diactoros",
        "format": "PHP Composer",
        "version": "1.6.1",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "693b7262a10b55ff1161",
        "name": "hashicorp/vault",
        "format": "Golang",
        "version": "1.4.2",
        "vulnerability": "Security-Critical",
        "cveScore": 9.7,
        "cve": "CVE-2020-16250",
        "vulnDescription": "The hashicorp/vault package is vulnerable due to Improper Authentication. The pathConfigClientCreateUpdate() function in the path_config_client.go file, the pathLoginUpdateIam() and the submitCallerIdentityRequest() functions in the path_login.go file do not properly validate identities and roles when using AWS IAM authentication. A remote attacker can exploit this behavior by sending a specially-crafted authentication request. This would trigger a JSON encoded response from an STS server containing an attacker-controlled GetCallerIdentityResponse as part of its body. This would allow the attacker to spoof arbitrary AWS identities and roles.",
        "remediation": "Advisory Deviation Notice: The Sonatype security research team discovered that the fix for this vulnerability was actually introduced in version 1.2.6 in the 1.2.x branch instead of 1.2.5 as stated in the advisory."
    },
    {
        "hash": "70874c8005bd7c252940",
        "name": "containerd/containerd",
        "format": "Golang",
        "version": "1.3.4",
        "vulnerability": "Security-High",
        "cveScore": 7.8,
        "cve": "CVE-2021-41103",
        "vulnDescription": "The containerd package is vulnerable to Path Traversal attacks. The newBundle() function in bundle.go and the NewSnapshotter() function in btrfs.go fail to enforce the correct permission and user ID mappings when creating new directories inside containers. The invalid mappings may give unprivileged users on the host system read, write, and execute privileges on vulnerable containers. A local attacker with access to a container that was created using a vulnerable version of the application may steal or modify sensitive data, and under certain circumstances may execute programs that lead to Privilege Escalation and Remote Code Execution (RCE) inside the container.",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Note: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
    },
    {
        "hash": "1c5dd6e6b40e22959cab",
        "name": "shopify/sarama",
        "format": "Golang",
        "version": "1.16.0",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "5d89b19d2e644e085014",
        "name": "stretchr/objx",
        "format": "Golang",
        "version": "0.1.0",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "3f8e0e43e71a6315e878",
        "name": "log4net",
        "format": "NuGet",
        "version": "2.0.9",
        "vulnerability": "Security-Critical",
        "cveScore": 9.8,
        "cve": "CVE-2018-1285",
        "vulnDescription": "The log4net package is vulnerable to XML eXternal Entity (XXE) attacks. The InternalConfigure() method in the XmlConfigurator.cs file processes malicious entities by default due to an insecure parser configuration. A remote attacker who can supply a log4net configuration file can exploit this vulnerability by supplying XML data with a DTD that defines malicious entities. The attacker can leverage this vulnerability to exfiltrate sensitive information, cause a Denial of Service (DoS) condition, or to perform various other XXE related attacks.",
        "remediation": "Advisory Deviation Notice: The Sonatype security research team discovered that the fix for this vulnerability has been released in 2.0.10, despite the 'before 2.0.8' wording in the NVD advisory. The log4net package has been given dormant status by Apache, and there are no plans for future releases or maintenance. Reference: https://lists.apache.org/thread.html/reab1c277c95310bad1038255e0757857b2fbe291411b4fa84552028a%40%3Cdev.logging.apache.org%3E"
    },
    {
        "hash": "199b5bf01b8af59beb49",
        "name": "nancy",
        "format": "NuGet",
        "version": "2.0.0",
        "vulnerability": "Security-High",
        "cveScore": 9.7,
        "cve": "CVE-2017-9785",
        "vulnDescription": "In vulnerable versions 0.8.0 up to but not including 1.4.4, and 2.x before 2.0.0-barneyrubble, the NCSRF cookie is generated with a unique CSRFToken object, and serialized and base64 encoded via the Serialize() method in DefaultObjectSerializer.cs. An attacker can exploit this vulnerability by submitting a base64 encoded payload which, when later deserialized in GetCookieToken(), can result in Remote Code Execution (RCE). In vulnerable 2.x versions after 2.0.0-alpha, the use of .NET core BinaryFormatter, in DefaultObjectSerializer, is replaced with a custom JSON parser implementation. The NCSRF cookie is generated with a unique CSRFToken object, and serialized via the Serialize() method in DefaultObjectSerializer.cs. The serialized NCSRF cookie contains type discrimination information. An attacker can exploit this vulnerability by submitting arbitrary type information which, when later deserialized in GetCookieToken(), can lead to Remote Code Execution (RCE).",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Advisory Deviation Notice: The Sonatype security research team discovered that this vulnerability was introduced in version 0.8.0 and does not exist in all versions prior to 1.4.4 as stated in the advisory."
    },
    {
        "hash": "ae05703aa205fb7a59e5",
        "name": "castle.core",
        "format": "NuGet",
        "version": "4.4.0",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "1bd8b2d7012e7faa7009",
        "name": "json.net",
        "format": "NuGet",
        "version": "1.0.16",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    },
    {
        "hash": "85c377efc85b70956cf7",
        "name": "carthage",
        "format": "Swift",
        "version": "0.18.1",
        "vulnerability": "Security-High",
        "cveScore": 7.8,
        "cve": "sonatype-2020-1506",
        "vulnDescription": "This issue has undergone the Sonatype Fast-Track process. For more information, please see the Sonatype Knowledge Base Guide",
        "remediation": "We recommend upgrading to a version of this component that is not vulnerable to this specific issue. Note: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control."
    },
    {
        "hash": "93da36ee4b410a6cbf39",
        "name": "antitypical/result",
        "format": "Swift",
        "version": "2.1.3",
        "vulnerability": "",
        "cveScore": 0,
        "cve": "",
        "vulnDescription": "",
        "remediation": ""
    }
    
]